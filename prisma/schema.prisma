//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id               String            @id() @default(uuid())
  name             String?
  email            String?           @unique()
  pictureUrl       String?           @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  stripeCustomerId String?
  status           UserStatus        @default(VERIFIED)
  globalRole       String            @default("USER")
  /// @password
  /// @omit
  password         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt()
  agents           Agent[]           @relation("user")
  workflows        Workflow[]        @relation("user")
  tools            Tool[]            @relation("user")
  notifications    Notification[]    @relation("user")
  settings         Setting[]         @relation("user")
  chatParticipants ChatParticipant[]
}

/// @@allow('all', true)
model Documentation {
  id        String   @id() @default(uuid())
  category  String?
  title     String?
  content   String?
  section   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Agent {
  id             String          @id() @default(uuid())
  name           String?
  description    String?
  type           String?
  status         String?
  configuration  Json?
  template       Json?
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], name: "user")
  workflowAgents WorkflowAgent[] @relation("agent")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Workflow {
  id             String          @id() @default(uuid())
  name           String?
  description    String?
  status         String?
  schedule       Json?
  configuration  Json?
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], name: "user")
  workflowAgents WorkflowAgent[] @relation("workflow")
  executions     Execution[]     @relation("workflow")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Tool {
  id            String   @id() @default(uuid())
  name          String?
  type          String?
  apiKey        String?
  configuration Json?
  status        String?
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WorkflowAgent {
  id            String    @id() @default(uuid())
  sequence      Float?
  configuration Json?
  workflowId    String?
  workflow      Workflow? @relation(fields: [workflowId], references: [id], name: "workflow")
  agentId       String?
  agent         Agent?    @relation(fields: [agentId], references: [id], name: "agent")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Execution {
  id         String    @id() @default(uuid())
  status     String?
  startTime  String?
  endTime    String?
  result     Json?
  workflowId String?
  workflow   Workflow? @relation(fields: [workflowId], references: [id], name: "workflow")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id        String   @id() @default(uuid())
  type      String?
  message   String?
  status    String?
  priority  Float?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Setting {
  id        String   @id() @default(uuid())
  category  String?
  name      String?
  value     String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().id == userId)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('read', conversation.participants?[userId == auth().id])
/// @@allow('create', true)
model ChatParticipant {
  id                String           @id() @default(uuid())
  lastReadMessageId String?
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  conversationId    String
  conversation      ChatConversation @relation(fields: [conversationId], references: [id])
  messages          ChatMessage[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', true)
/// @@allow('read', participants?[userId == auth().id])
model ChatConversation {
  id           String            @id() @default(uuid())
  participants ChatParticipant[]
  messages     ChatMessage[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt()
}

/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', participant.userId == auth().id)
/// @@allow('create', true)
/// @@allow('read', conversation.participants?[userId == auth().id])
model ChatMessage {
  id             String           @id() @default(uuid())
  content        String?
  conversationId String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id])
  participantId  String
  participant    ChatParticipant  @relation(fields: [participantId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt()
}
